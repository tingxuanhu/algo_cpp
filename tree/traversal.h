#ifndef TRAVERSAL
#define TRAVERSAL

#include "tree.h"

/* ======================== 用栈实现前中后序遍历（迭代，非递归）=================== */ 

/**
 * 先序遍历
 * 1）栈顶元素（root）弹出，
 * 2）有右孩压入，有左压入,先右再左保证弹栈先左在右
*/
void preTraversal(Node * root);


/**
 * 后序遍历   左右头
 * 用栈来实现    先序时先压右再压左，弹出是先左再右；那么后序反着，可以先压入左再压入右弹出右再弹出左   造成头右左
 * 这个结果和期待的后序左右头正好相反，所以可以把这个结果放在新的栈里，那么再弹新栈就能达到目的
*/
void postTraversal(Node * root);

/**
 * 中序遍历
 * 二叉树可以通过左子树的不断切割而划分干净
 * 把左子树不断压入栈，直到没有孩子，而后弹栈，弹栈同时进入右子树重复划分左子树的动作
 * 通过这种方式能够分解掉整棵树
 * 
*/
void inTraversal(Node * root);

/* ============================  按层 bfs   遍历  ================================== */
void level(Node * root);

#endif